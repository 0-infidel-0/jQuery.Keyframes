// Generated by CoffeeScript 1.6.3
(function() {
  var $;

  $ = jQuery ? jQuery : window.jQuery;

  $.frameCollection = [];

  $.keyframe = {
    browserCode: function() {
      var ua;
      ua = navigator.userAgent;
      if (ua.indexOf("Opera") !== -1) {
        return "-o-";
      } else if (ua.indexOf("MSIE") !== -1) {
        return "-ms-";
      } else if (ua.indexOf("WebKit") !== -1) {
        return "-webkit-";
      } else if (navigator.product === "Gecko") {
        return "-moz-";
      } else {
        return "";
      }
    },
    isSupported: function() {
      var animationSupport, animationstring, element, keyframeprefix, pfx;
      element = document.getElementsByTagName('body')[0];
      animationstring = "animation";
      keyframeprefix = "";
      pfx = this.browserCode();
      animationSupport = false;
      if (element.style.animationName) {
        animationSupport = true;
      } else {
        pfx = pfx.slice(1, -1);
        if (element.style[pfx + "AnimationName"] !== undefined) {
          animationSupport = true;
        }
      }
      return animationSupport;
    },
    generate: function(frameName) {
      var $keyframeStyle, browserType, css, fd, frameData;
      $keyframeStyle = $("<style>").attr({
        "class": "keyframe-style",
        id: frameName,
        type: "text/css"
      }).appendTo("head");
      browserType = this.browserCode();
      css = "@" + browserType + "keyframes " + frameName + "{";
      for (frameData in $.frameCollection[frameName].data) {
        if (frameData !== "name") {
          css += frameData + "{";
          fd = $.frameCollection[frameName].data;
          css += fd[frameData] + "}";
        }
      }
      css += "}\n";
      return $keyframeStyle.append(css);
    },
    add: function(frameData) {
      var data, index, kfname, _i, _len, _results;
      if (typeof frameData === Array) {
        _results = [];
        for (index = _i = 0, _len = frameData.length; _i < _len; index = ++_i) {
          data = frameData[index];
          kfname = data.name;
          data.name = "";
          $.frameCollection[kfname] = {
            data: data
          };
          _results.push($.keyframe.generate(kfname));
        }
        return _results;
      } else {
        kfname = frameData.name;
        frameData.name = "";
        $.frameCollection[kfname] = {
          data: frameData
        };
        return $.keyframe.generate(kfname);
      }
    }
  };

  $.fn.resetKeyframe = function(callback) {
    var animationkey;
    $(this).css($.keyframe.browserCode() + "animation-play-state", "running");
    animationkey = $.keyframe.browserCode() + "animation";
    $(this).css(animationkey, "none");
    $(this).data("keyframe", false);
    clearInterval($(this).data("keyframeTimer"));
    clearTimeout($(this).data("keyframeTimer"));
    if (callback) {
      return setTimeout(callback, 1);
    }
  };

  $.fn.pauseKeyframe = function() {
    $(this).css($.keyframe.browserCode() + "animation-play-state", "paused");
    clearInterval($(this).data("keyframeTimer"));
    return clearTimeout($(this).data("keyframeTimer"));
  };

  $.fn.resumeKeyframe = function() {
    return $(this).css($.keyframe.browserCode() + "animation-play-state", "running");
  };

  $.fn.extend({
    playKeyframe: function(frameOptions) {
      var animationcss, animationkey, callback, defaultsOptions, delay, duration, name, repeat;
      defaultsOptions = {
        duration: 0,
        timingFunction: "ease",
        delay: 0,
        repeat: 1,
        direction: "normal",
        fillMode: "forwards"
      };
      frameOptions = $.extend(defaultsOptions, frameOptions);
      name = frameOptions.name;
      duration = frameOptions.duration;
      delay = frameOptions.delay;
      repeat = frameOptions.repeat;
      if (typeof frameOptions.duration !== "string") {
        frameOptions.duration = frameOptions.duration + "ms";
      }
      if (typeof frameOptions.duration !== "string") {
        frameOptions.delay = frameOptions.delay + "ms";
      }
      animationcss = "" + name + " " + frameOptions.duration + " " + frameOptions.timingFunction + " " + frameOptions.delay + " " + repeat + " " + frameOptions.direction + " " + frameOptions.fillMode;
      callback = frameOptions.complete ? frameOptions.complete : null;
      animationcss = animationcss.trim();
      animationkey = $.keyframe.browserCode() + "animation";
      return this.each(function() {
        var _this = this;
        $(this).addClass("boostKeyframe");
        $(this).css($.keyframe.browserCode() + "animation-play-state", "running");
        $(this).data("keyframe", name);
        $(this).css(animationkey, animationcss);
        if (repeat === "infinite") {
          if (callback != null) {
            return $(this).data("keyframeTimer", setTimeout(function() {
              callback();
              return $(_this).data("keyframeTimer", setInterval(callback, duration));
            }, duration + delay));
          }
        } else {
          if (callback) {
            $(this).data("keyframeTimer", setTimeout(callback, (duration + delay) * repeat));
          }
          return setTimeout((function() {
            return $(_this).data("keyframe", false);
          }), (duration + delay) * repeat);
        }
      });
    }
  });

  $("<style>").attr({
    "class": "keyframe-style",
    id: "boost-keyframe",
    type: "text/css"
  }).appendTo("head").append(" .boostKeyframe{" + browserType + "transform:scale3d(1,1,1);}");

}).call(this);
