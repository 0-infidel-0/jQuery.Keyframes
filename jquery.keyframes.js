// Generated by CoffeeScript 1.6.3
(function() {
  var $createKeyframeStyleTag, animationPlayState, browserType, keyframeTimer, playStateRunning;

  $createKeyframeStyleTag = function(params) {
    return $("<style>").attr({
      "class": "keyframe-style",
      id: params.id,
      type: "text/css"
    }).appendTo("head");
  };

  $.keyframe = {
    browserCode: function() {
      var ua;
      ua = navigator.userAgent;
      if (ua.indexOf("Opera") !== -1) {
        return "-o-";
      } else if (ua.indexOf("MSIE") !== -1) {
        return "-ms-";
      } else if (ua.indexOf("WebKit") !== -1) {
        return "-webkit-";
      } else if (navigator.product === "Gecko") {
        return "-moz-";
      } else {
        return "";
      }
    },
    isSupported: function() {
      var animationSupport, element, pfx;
      element = $('body').get(0);
      animationSupport = false;
      if (element.style.animationName) {
        animationSupport = true;
      } else {
        pfx = this.browserCode().slice(1, -1);
        if (element.style[pfx + "AnimationName"]) {
          animationSupport = true;
        }
      }
      return animationSupport;
    },
    generate: function(frameData) {
      var css, frameName, property;
      frameName = frameData.name || "";
      css = "@" + (this.browserCode()) + "keyframes " + frameName + " {";
      for (property in frameData) {
        if (property !== "name") {
          css += "" + property + "{" + frameData[property] + "}";
        }
      }
      css += "}";
      return $createKeyframeStyleTag({
        id: frameName
      }).append(css);
    },
    add: function(frameData) {
      var frame, _i, _len, _results;
      if (typeof frameData === Array) {
        _results = [];
        for (_i = 0, _len = frameData.length; _i < _len; _i++) {
          frame = frameData[_i];
          _results.push(this.generate(frame));
        }
        return _results;
      } else {
        return this.generate(frameData);
      }
    }
  };

  browserType = $.keyframe.browserCode();

  keyframeTimer = "keyframeTimer";

  animationPlayState = "animation-play-state";

  playStateRunning = "running";

  $.fn.resetKeyframe = function(callback) {
    var $el;
    $el = $(this).css(browserType + animationPlayState, playStateRunning).css(browserType + "animation", "none").data("keyframe", false);
    clearInterval($el.data(keyframeTimer));
    clearTimeout($el.data(keyframeTimer));
    if (callback) {
      return setTimeout(callback, 1);
    }
  };

  $.fn.pauseKeyframe = function() {
    var $el;
    $el = $(this).css(browserType + animationPlayState, "paused");
    clearInterval($el.data(keyframeTimer));
    return clearTimeout($el.data(keyframeTimer));
  };

  $.fn.resumeKeyframe = function() {
    return $(this).css(browserType + animationPlayState, playStateRunning);
  };

  $.fn.extend({
    playKeyframe: function(frameOptions) {
      var animationcss, animationkey, callback, defaultsOptions, delay, duration, name, repeat;
      defaultsOptions = {
        duration: 0,
        timingFunction: "ease",
        delay: 0,
        repeat: 1,
        direction: "normal",
        fillMode: "forwards",
        complete: null
      };
      frameOptions = $.extend(defaultsOptions, frameOptions);
      name = frameOptions.name;
      duration = frameOptions.duration;
      delay = frameOptions.delay;
      repeat = frameOptions.repeat;
      frameOptions.duration = duration + "ms";
      frameOptions.delay = delay + "ms";
      animationcss = "" + name + " " + frameOptions.duration + " " + frameOptions.timingFunction + " " + frameOptions.delay + " " + repeat + " " + frameOptions.direction + " " + frameOptions.fillMode;
      callback = frameOptions.complete;
      animationkey = browserType + "animation";
      return this.each(function() {
        var $el,
          _this = this;
        $el = $(this).addClass("boostKeyframe").css(browserType + animationPlayState, playStateRunning).css(animationkey, animationcss).data("keyframe", name);
        if (repeat === "infinite") {
          if (callback != null) {
            return $el.data(keyframeTimer, setTimeout(function() {
              callback();
              return $el.data(keyframeTimer, setInterval(callback, duration));
            }, duration + delay));
          }
        } else {
          if (callback) {
            $el.data(keyframeTimer, setTimeout(callback, (duration + delay) * repeat));
          }
          return setTimeout((function() {
            return $el.data("keyframe", false);
          }), (duration + delay) * repeat);
        }
      });
    }
  });

  $createKeyframeStyleTag({
    id: "boost-keyframe"
  }).append(" .boostKeyframe{" + browserType + "transform:scale3d(1,1,1);}");

}).call(this);
